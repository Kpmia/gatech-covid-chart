{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","data","setData","useEffect","Papa","parse","download","header","dynamicTyping","complete","results","file","console","log","filter","row","date","cases","reverse","length","map","x","Date","y","id","className","width","window","innerWidth","height","innerHeight","useMesh","tooltip","point","class","xFormatted","enableSlices","yScale","type","yFormat","xFormat","xScale","format","axisBottom","legend","legendOffset","tickValues","legendPosition","axisLeft","axisTop","axisRight","enableGridX","enableGridY","theme","textColor","margin","bottom","top","left","right","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+KAAAA,EAAOC,QAAU,IAA0B,kC,uKCyG5BC,MAlGf,WACE,IADa,EAGSC,qBAHT,mBAGRC,EAHQ,KAGFC,EAHE,KAsCb,OAjCAC,qBAAU,WACRC,IAAKC,MALS,sEAMZ,CACEC,UAAU,EACVC,QAAQ,EACRC,eAAe,EACfC,SAAU,SAACC,EAASC,GAClBC,QAAQC,IAAIH,GAKZT,GAFAA,EAAOS,EAAQT,KAAKa,QAAO,SAACC,GAAD,OACzBA,EAAIC,MAAQD,EAAIE,UACNC,UACZN,QAAQC,IAAR,gBAAqBZ,EAAKkB,OAA1B,4BAAoDlB,EAAK,GAAGe,KAA5D,eAAuEf,EAAKA,EAAKkB,OAAS,GAAGH,OAG7Ff,EAAOA,EAAKmB,KAAI,SAACL,GAAD,MAAU,CACxBM,EAAG,IAAIC,KAAKP,EAAIC,MAChBO,EAAGR,EAAIE,UAETL,QAAQC,IAAIZ,GACZC,EAAQ,CAAC,CACPsB,GAAI,EACJvB,KAAMA,UAIb,IAOD,yBAAKwB,UAAU,OACb,4BAAQA,UAAU,cAChB,kEAEExB,EACE,kBAAC,IAAD,CACEA,KAAMA,EAENyB,MAA2B,GAApBC,OAAOC,WACdC,OAA6B,GAArBF,OAAOG,YAEfC,SAAS,EACTC,QAAS,YAAgB,IAAbC,EAAY,EAAZA,MAEV,OADArB,QAAQC,IAAIoB,GACL,6BACL,uBAAGC,MAAM,eAAeD,EAAMhC,KAAKkC,YACnC,uBAAGD,MAAM,eAAoBD,EAAMhC,KAAKsB,EAAI,WAGhDa,cAAc,EACdC,OAAQ,CACNC,KAAM,UAERC,QAAS,SAACxB,GAAD,MAAS,KAClByB,QAAQ,gBACRC,OAAQ,CACNH,KAAM,OACNI,OAAQ,UAEVC,WAAY,CACVC,OAAQ,OACRC,aAAc,GACdH,OAAQ,WACRI,WAAY,EACZC,eAAgB,UAElBC,SAAU,CACRJ,OAAQ,QACRC,cAAe,GACfE,eAAgB,UAElBE,QAAS,KACTC,UAAW,KACXC,aAAa,EACbC,aAAa,EACbC,MAlDE,CACZC,UAAW,WAkDDC,OAAQ,CACNC,OAAQ,GACRC,IAAK,GACLC,KAAM,GACNC,MAAO,MAEN,aCtFGC,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhE,QAAQgE,MAAMA,EAAMC,c","file":"static/js/main.ab499c8a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Papa from 'papaparse';\nimport { Line, ResponsiveLine } from '@nivo/line'\nimport moment from 'moment';\n\nfunction App() {\n  const CSV_URL = 'https://gatech-covid-19-data.s3.amazonaws.com/gatech_covid_data.csv';\n\n  let [data, setData] = useState();\n\n  useEffect(() => {\n    Papa.parse(CSV_URL,\n      {\n        download: true,\n        header: true,\n        dynamicTyping: true,\n        complete: (results, file) => {\n          console.log(results);\n\n          // Filter for valid rows\n          data = results.data.filter((row) =>\n            row.date && row.cases);\n          data = data.reverse();\n          console.log(`Found ${data.length} valid rows from ${data[0].date} to ${data[data.length - 1].date}`)\n\n          // Map to xy\n          data = data.map((row) => ({\n            x: new Date(row.date),\n            y: row.cases\n          }));\n          console.log(data);\n          setData([{\n            id: 0,\n            data: data\n          }]);\n        }\n      })\n  }, []);\n\n  const theme = {\n    textColor: '#ffffff',\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Georgia Tech COVID Cases over Time</h1>\n        {\n          data ?\n            <Line\n              data={data}\n\n              width={window.innerWidth * 0.8}\n              height={window.innerHeight * 0.8}\n\n              useMesh={true}\n              tooltip={({ point }) => {\n                console.log(point)\n                return <div>\n                  <p class=\"tooltip-row\">{point.data.xFormatted}</p>\n                  <p class=\"tooltip-row\">{'' + point.data.y + 'cases'}</p>\n                </div>\n              }}\n              enableSlices={false}\n              yScale={{\n                type: 'linear'\n              }}\n              yFormat={(row) => 'a'}\n              xFormat=\"time:%Y-%m-%d\"\n              xScale={{\n                type: 'time',\n                format: 'native',\n              }}\n              axisBottom={{\n                legend: 'Date',\n                legendOffset: 40,\n                format: '%Y %b %d',\n                tickValues: 8,\n                legendPosition: 'middle'\n              }}\n              axisLeft={{\n                legend: 'Cases',\n                legendOffset: -40,\n                legendPosition: 'middle'\n              }}\n              axisTop={null}\n              axisRight={null}\n              enableGridX={false}\n              enableGridY={false}\n              theme={theme}\n              margin={{\n                bottom: 50,\n                top: 50,\n                left: 50,\n                right: 50\n              }}\n            /> : 'Loading'\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}